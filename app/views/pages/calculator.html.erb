<!-- 1. Create form with correct names -->
<!-- 2. Display weekly contribution figure -->
<!-- 3. Add an ID to the form -->
<!-- 4. In JS file, store weekly contribution in a variable -->
<!-- 5. In JS file, select form and store two inputs (name and cost of the purchase) in a variable -->
<!-- 6. In JS file, when submitting form prevent it from refreshing -->
<!-- 6. In JS file, when on-submit event you want to execute (weekly contribution - cost of purchase)
        - Determine how much sum of WC - COP impacts goal timeline
        - Interpolate impact of goal timeline within reasons for saving
        - Represent the sum of WC - COP visually
        -->

<div class="container">
      <!-- <h1> Your Goal </h1> -->
  <div class= "home_title" id="goal_name"><h1><%= params[:param1] %></h1></div>
  <div class= "quotes" id="goal_reason"> "<%= params[:param3] %>"</div>

      <!-- Divs for the calculator sectioned off -->
    <div class="goals-bg">
      <div class= "d-flex justify-content-between" id="due_date">
        <div>Due</div>
        <div><%= params[:param2] %></div>
      </div>
      <div class="wc">
        <div class=""> Weekly Contribution</div>
        <div class="dollar"> $ </div>
        <div id= "weekly-contribution"><%= params[:param4]%></div>
      </div>

      <!-- THE FORM BEGINS HERE -->
      <form id="purchase_form" class="calc-form">
      <!-- STEP 1 -->
        <fieldset class="step step1 active">

          <label class="purchase" for="purchase">What do you want to buy?</label><br>
          <input id="what-to-buy" type="text" class="purchase form-control form-style mb-2" name="purchase" autocomplete="off"><br>
          <div class="msf_btn_pack">
            <!-- <input class="back-btn" type="button" name="back" value="Back"> -->
            <input class="next-btn" type="button" name="next" value="Next">
          </div>
        </fieldset>

        <!-- STEP 2 -->
        <fieldset class="step step2">
          <label class= "cost" for="cost">What's the cost?</label><br>
          <input id="what-is-cost" type="text" class="cost form-control form-style" name="cost" autocomplete="off">

           <div class="msf_btn_pack">
             <input class="back-btn" type="button" name="back" value="Back">
             <input class="submit worth-it" id="calc-submit" type="submit" name="worth-it" value="Worth It?">
            </div>
        </fieldset>

        <!-- STEP 3 - RESULTS -->
        <fieldset class="step step3">
        <div class="calc-results col-md-12 mx-auto">
          <h2 id="heading"></h2>
            <div id="impact"></div>
              <ul id="list">
                <li id="setback"></li>
                <li id="days_reason"></li>
              </ul>
              <p id="context"></p>
              <p id="visual"><p>
            <div class="impact-btns">
              <button id="again" class="submit-btn ask-again"> Ask Again </button>
            </div>
        </div>
        </fieldset>
      </div>
    </form>
  </div>
<div id="goal_name" type="hidden" value="<%= params[:param1] %>" />
<div id="due_date" type="hidden" value="<%= params[:param2] %>" />
<div id="goal_reason" type="hidden" value="<%= params[:param3] %>" />

<!-- Create divs for each param -->
<!-- Hide them so users can't see on the browse -->
<!-- Access them with JS so the calculator works -->

<script>
// const isSingular = require('is-singular')
const isSingular = (str) => {
  return true;
};

function calculator() {
  const purchaseForm = document.getElementById("purchase_form");

  if (purchaseForm) {
    const weeklyContribution = document.getElementById(
      "weekly-contribution"
    ).innerHTML;
    purchaseForm.addEventListener("submit", (event) => {
      event.preventDefault();
      const heading = document.getElementById("heading");
      const impact = document.getElementById("impact");
      const list = document.getElementById("list");
      const setback = document.getElementById("setback");
      const context = document.getElementById("context");
      const days_reason = document.getElementById("days_reason");
      const visual = document.getElementById("visual");
      const goal_name = document
        .getElementById("goal_name")
        .getAttribute("value");
      const goal_reason = document.getElementById("goal_reason").innerHTML;
      // const purchase = purchaseForm.querySelectorAll("input")[0].value
      // const cost = purchaseForm.querySelectorAll("input")[1].value
      const cost = document.getElementById("what-is-cost").value;
      const purchase = document.getElementById("what-to-buy").value;
      const listChildren = document.querySelectorAll("#list>li");
      const impactBtns = document.querySelector(".impact-btns");
      const again = document.getElementById("again");

      const calculatedImpact =
        (parseInt(cost) / parseInt(weeklyContribution)).toFixed() * 7;

      // This is randomizing the objects, value and emojis
      const object = [
        [`☕️`, 5, "coffees from a trendy Melbourne cafe"],
        [`🍹`, 10, "pints off the wood at your local."],
        [`🍕`, 25, "pizzas from LazerPig."],
        ["🎧", 20, "months of Spotify Premium."],
        [`🥃`, 10, "shots of Fireball."],
        [
          `🐖`,
          7,
          "of those nasty shredded ham pizzas you get around the corner.",
        ],
        [`🥑`, 10, "servings of smashed avo."],
        [`🍔`, 4, "Maccas Cheeseburgers."],
        [`🍆`, 30, "months of Tinder Gold. Apparently."],
        [`💪`, 40, "weeks worth of F45."],
        [`💻`, 11, "months of Netflix."],
        [`🎹`, 60, "piano lessons."],
        ["🥰", 80, "date nights."],
      ];

      const randomObject = object[Math.floor(Math.random() * object.length)];
      console.log(randomObject);

      const items = (parseInt(cost) / randomObject[1]).toFixed();
      const emoji = randomObject[0];
      const emoji_name = randomObject[2];
      // let randomQuote = "";
      // let positiveQuote = "";

      const quotes = [
        "Not so fast, Moneybags.",
        "Champagne taste on a beer budget, ey?",
        "Yeah that's gonna be a no from me, dawg",
        "We both know that's not a good idea.",
        "Denial. Not just a river in Egypt.",
        "How about a deep breath for dinner?",
        "Woah, slow your roll.",
        "Ease up, Turbo."
      ];
      let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
      const positiveQuote = "Look, it's not disastrous.";

      let finalQuote = calculatedImpact > 7 ? randomQuote : positiveQuote;
      // console.log(finalQuote);
      let i = 0;
      const SPEED = 50; /* The SPEED/duration of the effect in milliseconds */

      heading.innerText = "";
      /**
      * comments here.
      * 
      */
      const typeWriter = () => {
        if (i < finalQuote.length) {
          document.getElementById("heading").innerHTML += finalQuote.charAt(i);
          // document.getElementById("heading").innerHTML += positiveQuote.charAt(i);
          i++;
          impactSection();
        }
 /**
      * If you have ANY problems, it's probably this setTimeout.
      * 
      */
        setTimeout(typeWriter, SPEED);
      }
      
      const impactSection = () => {
        if (i == finalQuote.length - 1) {
          if (isSingular(purchase)) {
            impact.innerHTML = `If you buy the ${purchase} for $${cost}:`;
          } else {
            impact.innerHTML = `If you buy the ${purchase} for $${cost}:`;
          }

          if (calculatedImpact > 7) {
            setback.innerHTML = `1. You'll push your goal back another ${calculatedImpact} days`;
            // days_reason.innerHTML = `That's ${calculatedImpact} days longer you're whinging ${goal_reason}`
            days_reason.innerHTML = `2. You're saving so you can ${goal_reason}. How important is that to you?`;
          } else {
            setback.innerHTML = `1. Delays aren't great, but it'll only set you back less than a week`;
            // days_reason.innerHTML = `It's only a few days longer you're whinging ${goal_reason}`
            days_reason.innerHTML = `2. You're saving so you can ${goal_reason}. How important is that to you?`;
          }

          context.innerHTML = `For context, $${cost} is equivalent to ${items} ${emoji_name}`;
          visual.innerHTML = emoji.repeat(items);
          impactBtns.style.display = "flex";
          again.classList.remove("d-none");
        } else if (i === 1){ 
            impact.innerHTML = ""
            setback.innerHTML = ""
            days_reason.innerHTML = ""
            context.innerHTML = ""
            visual.innerHTML = ""
        }
      };
      listChildren.forEach((listChild) => {
        console.log(listChild);
        listChild.classList.add("list-item");
      });

      // the output to the calculator builder results

      typeWriter();
      // list.style.listStyleType = "disc"
    });
  }
}

calculator();
</script>
